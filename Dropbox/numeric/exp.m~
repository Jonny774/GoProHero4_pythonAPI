function exp()

    clear all;
    close all;
    clc;
    debug_mode   = true;

    dim = [0 0 1280 960];
    if ~debug_mode
        dim = [];
    end;
    
    max_RT      = 2;
    number_time = 1;
    rest_time   = 1;

    participant_id  = {'participant_id'}; %name of the EDF file (eye tracker data)
    prompt1         = {'Please enter participant id'};
    dlg_title1      = 'New participant';
    num_lines       = 1;
    answer1         = inputdlg(prompt1, dlg_title1, num_lines, participant_id);
    participant_id  = answer1{1};
    
    commandwindow;
    warning off all;   % no warnings will be shown during execution

    %open screen
    background_color     = [0, 0, 0]; %background color
    nr                   = max(Screen('Screens')); % detect how many monitors are in use and determine the experimental monitor
    [w, screenRect]      = Screen('OpenWindow', nr, background_color, dim); % open screen
    x0                   = screenRect(3)/2; % screen center
    y0                   = screenRect(4)/2;

    %% create trials
    numbers_1       = [1.1, 2.1]; %[1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1];
    numbers_2       = [1.1, 2.1]; %[1.2, 2.2, 3.2, 4.2, 5.2, 6.2, 7.2];

    occurrences     = 1;
    trials_1        = [repmat(numbers_1, 1, occurrences) repmat(10*numbers_1, 1, occurrences) repmat(-numbers_1, 1, occurrences) repmat(-10*numbers_1, 1, occurrences)];
    trials_2        = [repmat(numbers_2, 1, occurrences) repmat(10*numbers_2, 1, occurrences) repmat(-numbers_2, 1, occurrences) repmat(-10*numbers_2, 1, occurrences)];
    trials          = Shuffle([trials_1  trials_2]);    
    num_of_trails   = size(trials, 2);

    %%load images and set positions
    IMAGES_FOLDER = './exp_images/';

    numbers       = cell(1,9);
    numbers{1}    = imread([IMAGES_FOLDER,'1.jpg']);
    numbers{2}    = imread([IMAGES_FOLDER,'2.jpg']);
    numbers{3}    = imread([IMAGES_FOLDER,'3.jpg']);
    numbers{4}    = imread([IMAGES_FOLDER,'4.jpg']);
    numbers{5}    = imread([IMAGES_FOLDER,'5.jpg']);
    numbers{6}    = imread([IMAGES_FOLDER,'6.jpg']);
    numbers{7}    = imread([IMAGES_FOLDER,'7.jpg']);
    numbers{8}    = imread([IMAGES_FOLDER,'8.jpg']);
    numbers{9}    = imread([IMAGES_FOLDER,'9.jpg']);

    sides                   = 200;

    prop_small              = 1;
    prop_big                = 1.5;
    image_info              = imfinfo([IMAGES_FOLDER,'1.jpg']);
    
    small_left_destrect     = [x0-image_info.Width/2*prop_small-sides, y0-image_info.Height/2*prop_small, x0+image_info.Width/2*prop_small-sides, y0+image_info.Height/2*prop_small]; %images position in the center of screen
    small_right_destrect    = [x0-image_info.Width/2*prop_small+sides, y0-image_info.Height/2*prop_small, x0+image_info.Width/2*prop_small+sides, y0+image_info.Height/2*prop_small]; %images position in the center of screen

    big_left_destrect       = [x0-image_info.Width/2*prop_big-sides, y0-image_info.Height/2*prop_big, x0+image_info.Width/2*prop_big-sides, y0+image_info.Height/2*prop_big]; %images position in the center of screen
    big_right_destrect      = [x0-image_info.Width/2*prop_big+sides, y0-image_info.Height/2*prop_big, x0+image_info.Width/2*prop_big+sides, y0+image_info.Height/2*prop_big]; %images position in the center of screen
    
    
    %% select task
    big_physical    = false;
    small_physical  = false;
    big_numerical   = true;
    small_numerical = false;

    %% main loop
    for trail = 1:num_of_trails
        num = trials(trail);
        pos =  sign(num);
        num = abs(num);
        
        %% define correct answer
        if(big_physical)
            if((num>9 && pos<0) || (num<9 && pos>0))
                correct_ans = 'q';
            else
                correct_ans = 'p';
            end;
        end;
        if(small_physical)
            if((num<9 && pos<0) || (num>9 && pos>0))
                correct_ans = 'q';
            else
                correct_ans = 'p';
            end;
        end;
        
        if(big_numerical)
            if(pos>0)
                correct_ans = 'q';
            else
                correct_ans = 'p';
            end;
        end;
        if(small_numerical)
            if(pos<0)
                correct_ans = 'q';
            else
                correct_ans = 'p';
            end;
        end;

        %% get numbers
        if(abs(num)>9)         
            first  = num/10;
            second = int32(first+10*rem(first, 1));
            first  = int32(first);
        else
            first  = num;
            second = int32(first)+10*rem(first, 1);
            first  = int32(first);
        end;
        
        %% get positions
        if(pos>0)
            if(num>9)
                first_image_position = big_right_destrect;
                second_image_position = small_left_destrect;
            else
                first_image_position = small_right_destrect;
                second_image_position = big_left_destrect;
            end;
        else
            if(num>9)
                first_image_position = big_left_destrect;
                second_image_position = small_right_destrect;

            else
                first_image_position = small_left_destrect;
                second_image_position = big_right_destrect;
            end;
        end;
        
        %% present images
        first_image  = numbers{first};
        second_image = numbers{second};
        Screen('PutImage', w, first_image, first_image_position); % put image on screen
        Screen('PutImage', w, second_image, second_image_position); % put image on screen
        Screen('Flip', w);
        
        %% wait to response
        start       = GetSecs();
        keyIsDown   = 0;
        show        = true;

        while(keyIsDown==0 && (GetSecs()-start)<max_RT)
            if(show && GetSecs()-start>number_time)
                show = false;
                Screen('Flip', w);
            end;
            [keyIsDown, secs, keyCode, ~] =  KbCheck();
        end;

        %% save trail's data
        RT       = round(((GetSecs()-start)*1000))
        response = KbName(keyCode);

        
        accuracy = strcmp(response, correct_ans)
        
        Results.trail_id(trail, :)     = trail;
        if(pos<0)
            Results.left(trail, :)        = first;
            Results.right(trail, :)       = second;
        else
            Results.left(trail, :)        = second;
            Results.right(trail, :)       = first;
        end
        
        Results.RT(trail, :)           = RT;
        Results.correct_ans(trail, :)  = correct_ans;
        Results.accuracy(trail, :)     = accuracy;
        
        if(show)
            WaitSecs(number_time-(GetSecs()-start));
            Screen('Flip', w);
        end;
        WaitSecs(rest_time);
    end;
    Screen('CloseAll'); % close screen
    Outputfile = [participant_id '_res.mat'];
    full_data_table = struct2table(Results);

    save(Outputfile, 'full_data_table');
end

